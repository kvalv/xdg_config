local query = require("units")
local t = require("units.tests.utils")
local units = require("units")
local utils = require("utils")

describe("query function node", function()
	before_each(function()
		t.init()
		utils.vim_motion("3j")
	end)

	it("returns node if cursor inside of function", function()
		local node = query.get_closest_function()
		assert.equals(node:type(), "function_declaration")
	end)

	it("returns nil if cursor outside of function", function()
		utils.vim_motion("gg")
		local node = query.get_closest_function()
		assert.is.falsy(node)
	end)

	it("returns proper function name", function()
		local node = query.get_closest_function()
		local name = query.get_function_name(node)
		assert.are.same("AddNumbers", name)
	end)
end)

describe("creates test node", function()
	it("appends unit test with go filetype", function()
		t.open_test_file("foo.go")
		utils.vim_motion("3j")
		units.add_test_function("TestAddNumbers")
		utils.vim_motion("G")
		local test_fn_node = units.get_closest_function()
		assert.truthy(test_fn_node, vim.api.nvim_buf_get_lines(0, 0, -1, false))
		assert.same("TestAddNumbers", units.get_function_name(test_fn_node))
	end)

	it("appends unit test with python filetype", function()
		t.open_test_file("foo.py")
		utils.vim_motion("3j")
		units.add_test_function("test_add_numbers")
		utils.vim_motion("jjjj")
		local test_fn_node = units.get_closest_function()
		assert.truthy(test_fn_node, vim.api.nvim_buf_get_lines(0, 0, -1, false))
		assert.same("test_add_numbers", units.get_function_name(test_fn_node))
	end)
end)
